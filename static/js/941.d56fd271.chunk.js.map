{"version":3,"file":"static/js/941.d56fd271.chunk.js","mappings":"iKAkBA,G,QAhB6B,SAACA,EAA+CC,IACzEC,EAAAA,EAAAA,YAAU,YACc,WAChB,GAAIF,EAAUG,QAAS,CACnB,IACMC,EAD4BJ,EAAUG,QACrBE,WAAW,MAC9BD,IACIA,EAAQE,QAAU,QAClBF,EAAQG,YAAcN,EAElC,CACJ,CACAO,EACJ,GAAG,CAACR,EAAWC,GACnB,G,UCsCA,EApD0B,SAACD,EAA+CS,GAEtE,SAASC,EAAiBC,EAAmBC,GACzC,MAAO,CAACD,EAAME,MAAQD,EAAOE,WAC7BH,EAAMI,MAAQH,EAAOI,UACzB,EAEAd,EAAAA,EAAAA,YAAU,WACN,IAAMU,EAAiCZ,EAAUG,QAC3CC,EAAgB,OAANQ,QAAM,IAANA,OAAM,EAANA,EAAQP,WAAW,MACnC,SAASY,EAAUN,GACXC,GAAUR,IACVA,EAAQc,YACRd,EAAQe,OAAMC,MAAdhB,GAAOiB,EAAAA,EAAAA,GACAX,EAAgBC,EAAOC,KAE9BU,EAASX,GACTF,EAAON,SAAU,EAEzB,CACA,IAAMoB,EAAU,WACZd,EAAON,SAAU,CACrB,EAGMmB,EAAW,SAACX,GACVF,EAAON,SACPS,GAAUR,IACVA,EAAQoB,OAAMJ,MAAdhB,GAAOiB,EAAAA,EAAAA,GACAX,EAAgBC,EAAOC,KAE9BR,EAAQqB,SAEhB,GAEqB,WACjB,GAAIb,EACAA,EAAOc,iBAAiB,YAAaT,GAAW,GAChDL,EAAOc,iBAAiB,YAAaJ,GAAU,GAC/CV,EAAOc,iBAAiB,UAAWH,GAAS,EAQpD,CACAI,EACJ,GAAG,CAAC3B,EAAWS,GACnB,EClCA,EAhB+B,SAACT,EAA+C4B,IAE3E1B,EAAAA,EAAAA,YAAU,YACgB,WAClB,GAAIF,EAAUG,QAAS,CACnB,IACMC,EAD4BJ,EAAUG,QACrBE,WAAW,MAC9BD,IACAA,EAAQyB,UAAYD,EAE5B,CACJ,CACAE,EACJ,GAAG,CAAC9B,EAAW4B,GACnB,E,SCRe,SAASG,EAAUC,GAC9B,IAAMvB,GAASwB,EAAAA,EAAAA,SAAO,GAqCtB,OAnCA/B,EAAAA,EAAAA,YAAU,YACe,WACjB,GAAI8B,EAAMhC,UAAUG,QAAS,CACzB,IACMC,EAD4B4B,EAAMhC,UAAUG,QAC3BE,WAAW,MAC9BD,IACAA,EAAQE,QAAU,QAClBF,EAAQ8B,SAAW,QACnB9B,EAAQG,YAAcyB,EAAMG,SAC5B/B,EAAQgC,UAAYJ,EAAMK,YAC1BjC,EAAQkC,SAAS,EAAG,EAAGN,EAAMO,MAAOP,EAAMQ,QAC1CpC,EAAQyB,UAAYG,EAAMJ,QAC1BxB,EAAQqC,yBAA2B,cAE3C,CACJ,CACAC,EACJ,GAAG,CAACV,EAAMO,MAAOP,EAAMQ,SAEvBG,EAAqBX,EAAMhC,UAAWgC,EAAMG,UAC5CS,EAAuBZ,EAAMhC,UAAWgC,EAAMJ,SAC9CiB,EAAkBb,EAAMhC,UAAWS,IAe/BqC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACIC,EAAAA,EAAAA,KAAA,OAAAD,UACIC,EAAAA,EAAAA,KAAA,UAAQC,MAAO,CAAEV,MAAOP,EAAMO,OAASW,QAfnD,WACI,IAAMtC,EAAmCoB,EAAMhC,UAAUG,QACzD,GAAIS,EAAQ,CACR,IAAMR,EAAUQ,EAAOP,WAAW,MAC9BD,IACAA,EAAQgC,UAAYJ,EAAMK,YAC1BjC,EAAQkC,SAAS,EAAG,EAAGN,EAAMO,MAAOP,EAAMQ,QAElD,CACJ,EAMwEO,SAAC,aAEjEC,EAAAA,EAAAA,KAAA,OAAAD,UACIC,EAAAA,EAAAA,KAAA,UAAQG,aAAc,SAACC,GAC8B,IAADC,EAAAC,EAA9B,IAAdF,EAAEG,SAAiBvB,EAAMhC,UAAUG,UACZ,QAAvBkD,EAAArB,EAAMhC,UAAUG,eAAO,IAAAkD,GAAkB,QAAlBC,EAAvBD,EAAyBhD,WAAW,aAAK,IAAAiD,GAAzCA,EAA2CpC,YAC3CT,EAAON,SAAU,EAEzB,EAAGqD,aAAc,kBAAM/C,EAAON,SAAU,CAAI,EAAEsD,IAAKzB,EAAMhC,UAAWuC,MAAOP,EAAMO,MAAOC,OAAQR,EAAMQ,OAAQS,MAAO,CAAES,OAAQ,2BAI/I,CAEA3B,EAAU4B,aAAe,CACrBpB,MAAO,IACPC,OAAQ,IACRH,YAAa,UACbF,SAAU,UACVP,QAAS,G,+GClEE,SAASgC,EAAY5B,GAGhC,OACIc,EAAAA,EAAAA,MAAA,OAAKG,MAAO,CAAEY,QAAS,OAAQC,cAAe,SAAUC,SAAU,QAAShB,SAAA,EACvEC,EAAAA,EAAAA,KAAA,SAAAD,SAAO,YACPC,EAAAA,EAAAA,KAAA,SAAOgB,MAAOhC,EAAMiC,EAAGC,SAAU,SAAAd,GAAWe,OAAOf,EAAEgB,OAAOJ,OAAShC,EAAMqC,EAAI,WAAWrC,EAAMsC,KAAKH,OAAOf,EAAEgB,OAAOJ,OAAS,MAAQ,MAAQG,OAAOf,EAAEgB,OAAOJ,OAAQ,KACtKhB,EAAAA,EAAAA,KAAA,SAAAD,SAAO,aACPC,EAAAA,EAAAA,KAAA,SAAOgB,MAAOhC,EAAMqC,EAAGH,SAAU,SAAAd,GAAWe,OAAOf,EAAEgB,OAAOJ,OAAShC,EAAMiC,EAAI,WAAWjC,EAAMuC,KAAKJ,OAAOf,EAAEgB,OAAOJ,OAAS,MAAQ,MAAQG,OAAOf,EAAEgB,OAAOJ,OAAQ,KACtKhB,EAAAA,EAAAA,KAAA,SAAAD,SAAO,eACPC,EAAAA,EAAAA,KAAA,SAAOwB,KAAK,QAAQC,IAAI,IAAIC,IAAI,MAAMC,aAAc,GAAIT,SAAU,SAACd,GAAC,OAAKpB,EAAM4C,QAAQT,OAAOf,EAAEgB,OAAOJ,OAAO,KAC9GhB,EAAAA,EAAAA,KAAA,SAAAD,SAAO,gBACPC,EAAAA,EAAAA,KAAA,SAAOkB,SAAU,SAACd,GAAC,OAAKpB,EAAM6C,SAASzB,EAAEgB,OAAOJ,MAAM,EAAEQ,KAAK,QAAQvB,MAAO,CAAEY,QAAS,SAAUiB,OAAQ,YAGrH,C,cCXe,SAASC,IACpB,IAAAC,GAA0BC,EAAAA,EAAAA,UAAS,SAAQC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAApC/E,EAAKiF,EAAA,GAAEL,EAAQK,EAAA,GACtBE,GAAwBH,EAAAA,EAAAA,UAAS,IAAGI,GAAAF,EAAAA,EAAAA,GAAAC,EAAA,GAA7BE,EAAID,EAAA,GAAET,EAAOS,EAAA,GACpBE,GAAkBN,EAAAA,EAAAA,UAAS,KAAIO,GAAAL,EAAAA,EAAAA,GAAAI,EAAA,GAAxBtB,EAACuB,EAAA,GAAElB,EAAIkB,EAAA,GACdC,GAAkBR,EAAAA,EAAAA,UAAS,KAAIS,GAAAP,EAAAA,EAAAA,GAAAM,EAAA,GAAxBpB,EAACqB,EAAA,GAAEnB,EAAImB,EAAA,GACR1F,GAAYiC,EAAAA,EAAAA,QAA0B,MACtC0D,GAAc1D,EAAAA,EAAAA,QAA0B,MAM9C,OACIa,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACIC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,aACHD,EAAAA,EAAAA,MAAA,OAAK8C,UAAU,UAAS7C,SAAA,EACpBC,EAAAA,EAAAA,KAACjB,EAAAA,EAAS,CAACI,SAAUlC,EAAO2B,QAAS0D,EAAMtF,UAAWA,EAAWuC,MAAO0B,EAAGzB,OAAQ6B,KACnFvB,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACIC,EAAAA,EAAAA,KAACY,EAAW,CAACiB,SAAUA,EAAUD,QAASA,EAASX,EAAGA,EAAGI,EAAGA,EAAGC,KAAMA,EAAMC,KAAMA,KACjFvB,EAAAA,EAAAA,KAAA,KAAGS,IAAKkC,EAAaE,SAAS,YAAW9C,UAACC,EAAAA,EAAAA,KAAA,UAAQwB,KAAK,SAAStB,QAXhF,WACI,IAAI4C,EAAQ9F,EAAUG,QAAS4F,UAAU,aAAaC,QAAQ,YAAa,sBAC3EL,EAAYxF,QAAS8F,aAAa,OAAQH,EAC9C,EAQkG/C,SAAE,uBAKxG,C","sources":["hooks/useCanvasColorChange.tsx","hooks/useCanvasListener.tsx","hooks/useCanvasPenSizeChange.tsx","components/SketchPad.tsx","components/PenSettings.tsx","containers/PainterApp.tsx"],"sourcesContent":["import { useEffect } from \"react\";\n\nconst useCanvasColorChange = (canvasRef: React.RefObject<HTMLCanvasElement>, color: string) => {\n    useEffect(() => {\n        const changeColor = () => {\n            if (canvasRef.current) {\n                const canvas: HTMLCanvasElement = canvasRef.current;\n                const context = canvas.getContext(\"2d\");\n                if (context) {\n                        context.lineCap = \"round\";\n                        context.strokeStyle = color;\n                }\n            }\n        }\n        changeColor();\n    }, [canvasRef, color])\n}\n\nexport default useCanvasColorChange;","import { useEffect } from \"react\";\n\nconst useCanvasListener = (canvasRef: React.RefObject<HTMLCanvasElement>, isIdle: React.MutableRefObject<boolean>) => {\n    \n    function getStrokeVector (event: MouseEvent, canvas: HTMLCanvasElement) {\n        return [event.pageX - canvas.offsetLeft,\n        event.pageY - canvas.offsetTop] as [number, number]\n    }\n\n    useEffect(() => {\n        const canvas: HTMLCanvasElement|null = canvasRef.current;\n        const context = canvas?.getContext(\"2d\");\n        function drawStart(event: MouseEvent) {\n            if (canvas && context) {\n                context.beginPath();\n                context.moveTo(\n                    ...getStrokeVector(event, canvas)\n                );\n                drawMove(event);\n                isIdle.current = false;\n            }\n        }\n        const drawEnd = () => {\n            isIdle.current = true;\n        }\n        \n\n        const drawMove = (event: MouseEvent) => {\n            if (isIdle.current) return;\n            if (canvas && context) {\n                context.lineTo(\n                    ...getStrokeVector(event, canvas)\n                );\n                context.stroke();\n            }\n        }\n     \n        const addListeners = () => {\n            if (canvas) {\n                canvas.addEventListener(\"mousedown\", drawStart, false);\n                canvas.addEventListener(\"mousemove\", drawMove, false);\n                canvas.addEventListener(\"mouseup\", drawEnd, false);\n                \n                return () => {\n                    canvas.removeEventListener('mousedown', drawStart)\n                    canvas.removeEventListener('mousemove', drawMove)\n                    canvas.removeEventListener('mouseup', drawEnd)\n                }\n            }\n        }\n        addListeners();\n    }, [canvasRef, isIdle]);\n}\n\nexport default useCanvasListener;","import { useEffect } from \"react\";\n\nconst useCanvasPenSizeChange = (canvasRef: React.RefObject<HTMLCanvasElement>, penSize: number) => {\n    \n    useEffect(() => {\n        const changePenSize = () => {\n            if (canvasRef.current) {\n                const canvas: HTMLCanvasElement = canvasRef.current;\n                const context = canvas.getContext(\"2d\");\n                if (context) {\n                    context.lineWidth = penSize;\n                }\n            }\n        }\n        changePenSize();\n    }, [canvasRef, penSize])\n}\n\nexport default useCanvasPenSizeChange;","import { useEffect, useRef } from \"react\";\n\nimport \"../styles/Base.scss\";\n\nimport useCanvasColorChange from \"../hooks/useCanvasColorChange\";\nimport useCanvasListener from \"../hooks/useCanvasListener\";\nimport useCanvasPenSizeChange from \"../hooks/useCanvasPenSizeChange\";\n\nexport default function SketchPad(props: { width: number, height: number, canvasColor: string, penColor: string, penSize: number, canvasRef: React.RefObject<HTMLCanvasElement> }) {\n    const isIdle = useRef(true);\n\n    useEffect(() => {\n        const renderCanvas = () => {\n            if (props.canvasRef.current) {\n                const canvas: HTMLCanvasElement = props.canvasRef.current;\n                const context = canvas.getContext(\"2d\");\n                if (context) {\n                    context.lineCap = \"round\";\n                    context.lineJoin = 'round'\n                    context.strokeStyle = props.penColor;\n                    context.fillStyle = props.canvasColor;\n                    context.fillRect(0, 0, props.width, props.height);\n                    context.lineWidth = props.penSize;\n                    context.globalCompositeOperation = \"source-over\";\n                }\n            }\n        }\n        renderCanvas();\n    }, [props.width, props.height]) // eslint-disable-line react-hooks/exhaustive-deps\n\n    useCanvasColorChange(props.canvasRef, props.penColor);\n    useCanvasPenSizeChange(props.canvasRef, props.penSize);\n    useCanvasListener(props.canvasRef, isIdle)\n\n    function clearCanvas() {\n        const canvas: HTMLCanvasElement | null = props.canvasRef.current;\n        if (canvas) {\n            const context = canvas.getContext(\"2d\");\n            if (context) {\n                context.fillStyle = props.canvasColor;\n                context.fillRect(0, 0, props.width, props.height);\n            }\n        }\n    }\n\n\n    return (\n        <div>\n            <div>\n                <button style={{ width: props.width }} onClick={clearCanvas}>Clear</button>\n            </div>\n            <div>\n                <canvas onMouseEnter={(e) => {\n                    if (e.buttons === 1 && props.canvasRef.current) {\n                        props.canvasRef.current?.getContext(\"2d\")?.beginPath();\n                        isIdle.current = false;\n                    }\n                }} onMouseLeave={() => isIdle.current = true} ref={props.canvasRef} width={props.width} height={props.height} style={{ border: \"1px solid #000000\" }} />\n            </div>\n        </div>\n    )\n}\n\nSketchPad.defaultProps = {\n    width: 400,\n    height: 400,\n    canvasColor: \"#FFFFFF\",\n    penColor: \"#000000\",\n    penSize: 12\n}","import \"../styles/Base.scss\";\n\nexport default function PenSettings(props: { setColor: (color: string) => void, setSize: (size: number) => void, x: number, y: number, setX: (size: number) => void, setY: (size: number) => void }) {\n\n\n    return (\n        <div style={{ display: \"flex\", flexDirection: \"column\", flexWrap: \"wrap\" }}>\n            <label>Width:</label>\n            <input value={props.x} onChange={e => { if (Number(e.target.value) * props.y < 125006105) props.setX(Number(e.target.value) > 32767 ? 32767 : Number(e.target.value)) }} />\n            <label>Height:</label>\n            <input value={props.y} onChange={e => { if (Number(e.target.value) * props.x < 125006105) props.setY(Number(e.target.value) > 32767 ? 32767 : Number(e.target.value)) }} />\n            <label>Pen size:</label>\n            <input type=\"range\" min=\"1\" max=\"100\" defaultValue={10} onChange={(e) => props.setSize(Number(e.target.value))}></input>\n            <label>Pen color:</label>\n            <input onChange={(e) => props.setColor(e.target.value)} type=\"color\" style={{ display: 'inline', margin: 'auto' }}></input>\n        </div>\n    )\n}","/* eslint-disable jsx-a11y/anchor-is-valid */\nimport { useRef, useState } from \"react\";\nimport \"../styles/Base.scss\";\nimport \"../styles/PainterApp.scss\";\nimport PenSettings from \"../components/PenSettings\";\nimport SketchPad from \"../components/SketchPad\";\nexport default function PainterApp() {\n    const [color, setColor] = useState(\"black\");\n    const [size, setSize] = useState(10);\n    const [x, setX] = useState(400);\n    const [y, setY] = useState(400);\n    const canvasRef = useRef<HTMLCanvasElement>(null);\n    const downloadRef = useRef<HTMLAnchorElement>(null);\n\n    function download() {\n        var image = canvasRef.current!.toDataURL(\"image/png\").replace(\"image/png\", \"image/octet-stream\");\n        downloadRef.current!.setAttribute(\"href\", image);\n    }\n    return (\n        <div>\n            <p>Painter</p>\n            <div className=\"painter\">\n                <SketchPad penColor={color} penSize={size} canvasRef={canvasRef} width={x} height={y} />\n                <div>\n                    <PenSettings setColor={setColor} setSize={setSize} x={x} y={y} setX={setX} setY={setY} />\n                    <a ref={downloadRef} download=\"image.png\"><button type=\"button\" onClick={download} >Download</button></a>\n                </div>\n            </div>\n        </div>\n    )\n}"],"names":["canvasRef","color","useEffect","current","context","getContext","lineCap","strokeStyle","changeColor","isIdle","getStrokeVector","event","canvas","pageX","offsetLeft","pageY","offsetTop","drawStart","beginPath","moveTo","apply","_toConsumableArray","drawMove","drawEnd","lineTo","stroke","addEventListener","addListeners","penSize","lineWidth","changePenSize","SketchPad","props","useRef","lineJoin","penColor","fillStyle","canvasColor","fillRect","width","height","globalCompositeOperation","renderCanvas","useCanvasColorChange","useCanvasPenSizeChange","useCanvasListener","_jsxs","children","_jsx","style","onClick","onMouseEnter","e","_props$canvasRef$curr","_props$canvasRef$curr2","buttons","onMouseLeave","ref","border","defaultProps","PenSettings","display","flexDirection","flexWrap","value","x","onChange","Number","target","y","setX","setY","type","min","max","defaultValue","setSize","setColor","margin","PainterApp","_useState","useState","_useState2","_slicedToArray","_useState3","_useState4","size","_useState5","_useState6","_useState7","_useState8","downloadRef","className","download","image","toDataURL","replace","setAttribute"],"sourceRoot":""}