{"version":3,"file":"static/js/875.f67cc4e3.chunk.js","mappings":"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","sources":["hooks/useCanvasColorChange.tsx","hooks/useCanvasListener.tsx","hooks/useCanvasPenSizeChange.tsx","components/SketchPad.tsx","utils/tensorUtils.tsx","components/DigitRecognizer.tsx","containers/DigitRecognitionApp.tsx"],"sourcesContent":["import { useEffect } from \"react\";\r\n\r\nconst useCanvasColorChange = (canvasRef: React.RefObject<HTMLCanvasElement>, color: string) => {\r\n    useEffect(() => {\r\n        const changeColor = () => {\r\n            if (canvasRef.current) {\r\n                const canvas: HTMLCanvasElement = canvasRef.current;\r\n                const context = canvas.getContext(\"2d\");\r\n                if (context) {\r\n                        context.lineCap = \"round\";\r\n                        context.strokeStyle = color;\r\n                }\r\n            }\r\n        }\r\n        changeColor();\r\n    }, [canvasRef, color])\r\n}\r\n\r\nexport default useCanvasColorChange;","import { useEffect } from \"react\";\r\n\r\nconst useCanvasListener = (canvasRef: React.RefObject<HTMLCanvasElement>, isIdle: React.MutableRefObject<boolean>) => {\r\n    \r\n    function getStrokeVector (event: MouseEvent, canvas: HTMLCanvasElement) {\r\n        return [event.pageX - canvas.offsetLeft,\r\n        event.pageY - canvas.offsetTop] as [number, number]\r\n    }\r\n\r\n    useEffect(() => {\r\n        const canvas: HTMLCanvasElement|null = canvasRef.current;\r\n        const context = canvas?.getContext(\"2d\");\r\n        function drawStart(event: MouseEvent) {\r\n            if (canvas && context) {\r\n                context.beginPath();\r\n                context.moveTo(\r\n                    ...getStrokeVector(event, canvas)\r\n                );\r\n                drawMove(event);\r\n                isIdle.current = false;\r\n            }\r\n        }\r\n        const drawEnd = () => {\r\n            isIdle.current = true;\r\n        }\r\n        \r\n\r\n        const drawMove = (event: MouseEvent) => {\r\n            if (isIdle.current) return;\r\n            if (canvas && context) {\r\n                context.lineTo(\r\n                    ...getStrokeVector(event, canvas)\r\n                );\r\n                context.stroke();\r\n            }\r\n        }\r\n     \r\n        const addListeners = () => {\r\n            if (canvas) {\r\n                canvas.addEventListener(\"mousedown\", drawStart, false);\r\n                canvas.addEventListener(\"mousemove\", drawMove, false);\r\n                canvas.addEventListener(\"mouseup\", drawEnd, false);\r\n                \r\n                return () => {\r\n                    canvas.removeEventListener('mousedown', drawStart)\r\n                    canvas.removeEventListener('mousemove', drawMove)\r\n                    canvas.removeEventListener('mouseup', drawEnd)\r\n                }\r\n            }\r\n        }\r\n        addListeners();\r\n    }, [canvasRef, isIdle]);\r\n}\r\n\r\nexport default useCanvasListener;","import { useEffect } from \"react\";\r\n\r\nconst useCanvasPenSizeChange = (canvasRef: React.RefObject<HTMLCanvasElement>, penSize: number) => {\r\n    \r\n    useEffect(() => {\r\n        const changePenSize = () => {\r\n            if (canvasRef.current) {\r\n                const canvas: HTMLCanvasElement = canvasRef.current;\r\n                const context = canvas.getContext(\"2d\");\r\n                if (context) {\r\n                    context.lineWidth = penSize;\r\n                }\r\n            }\r\n        }\r\n        changePenSize();\r\n    }, [canvasRef, penSize])\r\n}\r\n\r\nexport default useCanvasPenSizeChange;","import { useEffect, useRef } from \"react\";\r\n\r\nimport \"../styles/Base.scss\";\r\n\r\nimport useCanvasColorChange from \"../hooks/useCanvasColorChange\";\r\nimport useCanvasListener from \"../hooks/useCanvasListener\";\r\nimport useCanvasPenSizeChange from \"../hooks/useCanvasPenSizeChange\";\r\n\r\nexport default function SketchPad(props: { width: number, height: number, canvasColor: string, penColor: string, penSize: number, canvasRef: React.RefObject<HTMLCanvasElement> }) {\r\n    const isIdle = useRef(true);\r\n\r\n    useEffect(() => {\r\n        const renderCanvas = () => {\r\n            if (props.canvasRef.current) {\r\n                const canvas: HTMLCanvasElement = props.canvasRef.current;\r\n                const context = canvas.getContext(\"2d\");\r\n                if (context) {\r\n                    context.lineCap = \"round\";\r\n                    context.lineJoin = 'round'\r\n                    context.strokeStyle = props.penColor;\r\n                    context.fillStyle = props.canvasColor;\r\n                    context.fillRect(0, 0, props.width, props.height);\r\n                    context.lineWidth = props.penSize;\r\n                    context.globalCompositeOperation = \"source-over\";\r\n                }\r\n            }\r\n        }\r\n        renderCanvas();\r\n    }, [props.width, props.height]) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    useCanvasColorChange(props.canvasRef, props.penColor);\r\n    useCanvasPenSizeChange(props.canvasRef, props.penSize);\r\n    useCanvasListener(props.canvasRef, isIdle)\r\n\r\n    function clearCanvas() {\r\n        const canvas: HTMLCanvasElement | null = props.canvasRef.current;\r\n        if (canvas) {\r\n            const context = canvas.getContext(\"2d\");\r\n            if (context) {\r\n                context.fillStyle = props.canvasColor;\r\n                context.fillRect(0, 0, props.width, props.height);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <button style={{ width: props.width }} onClick={clearCanvas}>Clear</button>\r\n            </div>\r\n            <div>\r\n                <canvas onMouseEnter={(e) => {\r\n                    if (e.buttons === 1 && props.canvasRef.current) {\r\n                        props.canvasRef.current?.getContext(\"2d\")?.beginPath();\r\n                        isIdle.current = false;\r\n                    }\r\n                }} onMouseLeave={() => isIdle.current = true} ref={props.canvasRef} width={props.width} height={props.height} style={{ border: \"1px solid #000000\" }} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nSketchPad.defaultProps = {\r\n    width: 400,\r\n    height: 400,\r\n    canvasColor: \"#FFFFFF\",\r\n    penColor: \"#000000\",\r\n    penSize: 12\r\n}","import * as tf from \"@tensorflow/tfjs\";\r\nimport { LayersModel, Tensor3D } from \"@tensorflow/tfjs\";\r\n\r\nexport function getResizedTensor(tensor: Tensor3D) {\r\n    return tf.tidy(() => {\r\n      const resizedTensor = tf.image.resizeNearestNeighbor(\r\n        tensor,\r\n        [28, 28],\r\n        true\r\n      );\r\n      return resizedTensor;\r\n    });\r\n  }\r\n\r\n export async function getResultsFromCanvasTensor(model: LayersModel, tensor: Tensor3D) {\r\n    const normalizedTensor  = tensor.dataSync().map((x) => {return x / 255});\r\n    const threeDTensor = tf.tensor3d(normalizedTensor, [28, 28, 1]);\r\n    const expandedTensor =  threeDTensor.expandDims();\r\n    const results = model.predict(expandedTensor);\r\n    // @ts-expect-error\r\n    const predictions = await results.array();\r\n    tf.dispose([tensor, normalizedTensor, threeDTensor, expandedTensor, results, predictions]);\r\n    return predictions[0];\r\n  }","import { useCallback, useEffect, useRef, useState } from \"react\";\r\nimport * as tf from \"@tensorflow/tfjs\";\r\nimport { LayersModel, Tensor3D } from \"@tensorflow/tfjs\";\r\n\r\nimport \"../styles/Base.scss\";\r\nimport * as tensorUtils from '../utils/tensorUtils';\r\nexport default function NumberRecognizer(props: { canvas: any }) {\r\n\r\n  const [prediction, setPrediction] = useState(0);\r\n  const [model, setModel] = useState<LayersModel | null>(null);\r\n  const smallCanvasRef = useRef<HTMLCanvasElement>(null);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      if (!model) {\r\n        let loadedModel: LayersModel;\r\n        try {\r\n          loadedModel = await tf.loadLayersModel('https://raw.githubusercontent.com/ixartz/handwritten-digit-recognition-tensorflowjs/master/public/classifiers/model.json'); //I decided to borrow this model since my own is struggling with recognizing 9s.\r\n        } catch (error) {\r\n          console.log('Model loading error: ' + error + '\\nFalling back to the saved one');\r\n          loadedModel = await tf.loadLayersModel('http://' + window.location.host + '/models/digit-recognition-model/digit-recognition-model.json'); //here's my model just in case\r\n        }\r\n        setModel(loadedModel!);\r\n      }\r\n    })();\r\n  }, [model]);\r\n\r\n  const makePrediction = useCallback(\r\n    async function MakePrediction(canvas: any, model: LayersModel) {\r\n      tf.engine().startScope();\r\n      const canvasTensor = tf.browser.fromPixels(canvas.current, 1);\r\n      const resizedCanvasTensor = tensorUtils.getResizedTensor(canvasTensor);\r\n      displayComparisonTensor(resizedCanvasTensor);\r\n      const results = tensorUtils.getResultsFromCanvasTensor(model, resizedCanvasTensor);\r\n      results.then(res => { displayResults(res); tf.dispose([res]) });\r\n      tf.dispose([canvasTensor, resizedCanvasTensor]);\r\n      tf.engine().endScope();\r\n\r\n      function displayComparisonTensor(tensor: Tensor3D) {\r\n        tf.browser.toPixels(tensor, smallCanvasRef.current as HTMLCanvasElement);\r\n      }\r\n\r\n      function displayResults(predictions: Number[]) {\r\n        setPrediction(predictions.reduce(pickIndexOfMaxValue, 0))\r\n\r\n        function pickIndexOfMaxValue(indexOfMaxValue: number, currentValue: Number, currentIndex: number, arr: Number[]) {\r\n          return currentValue > arr[indexOfMaxValue] ? currentIndex : indexOfMaxValue;\r\n        }\r\n      }\r\n    }\r\n    , []);\r\n\r\n  return (\r\n    <div>\r\n      <p>1. Draw a single digit</p>\r\n      <p>2. Click \"Predict\"</p>\r\n      <button onClick={() => { tf.tidy(() => { makePrediction(props.canvas, model!) }) }}>Predict</button>\r\n      <h1>{prediction}</h1>\r\n      <canvas width={28} height={28} ref={smallCanvasRef}></canvas>\r\n    </div>\r\n  )\r\n}\r\n","import \"../styles/Base.scss\";\r\nimport SketchPad from \"../components/SketchPad\";\r\nimport NumberRecognizer from \"../components/DigitRecognizer\";\r\nimport { useRef } from \"react\";\r\n\r\nexport default function NumberRecognitionApp() {\r\n    const canvasRef = useRef<HTMLCanvasElement>(null);\r\n    return (\r\n        <div>\r\n            <p>Digit Recognition</p>\r\n            <SketchPad canvasColor={'#000000'} penColor={\"white\"} width={280} height={280} penSize={20} canvasRef={canvasRef} />\r\n            <NumberRecognizer canvas={canvasRef}></NumberRecognizer>\r\n        </div>\r\n    )\r\n}"],"names":["canvasRef","color","useEffect","current","context","getContext","lineCap","strokeStyle","changeColor","isIdle","getStrokeVector","event","canvas","pageX","offsetLeft","pageY","offsetTop","drawStart","beginPath","moveTo","apply","_toConsumableArray","drawMove","drawEnd","lineTo","stroke","addEventListener","addListeners","penSize","lineWidth","changePenSize","SketchPad","props","useRef","lineJoin","penColor","fillStyle","canvasColor","fillRect","width","height","globalCompositeOperation","renderCanvas","useCanvasColorChange","useCanvasPenSizeChange","useCanvasListener","_jsxs","children","_jsx","style","onClick","onMouseEnter","e","_props$canvasRef$curr","_props$canvasRef$curr2","buttons","onMouseLeave","ref","border","defaultProps","getResizedTensor","tensor","tf","getResultsFromCanvasTensor","_x","_x2","_getResultsFromCanvasTensor","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","model","normalizedTensor","threeDTensor","expandedTensor","results","predictions","wrap","_context","prev","next","dataSync","map","x","expandDims","predict","array","sent","abrupt","stop","NumberRecognizer","_useState","useState","_useState2","_slicedToArray","prediction","setPrediction","_useState3","_useState4","setModel","smallCanvasRef","loadedModel","t0","console","log","window","location","host","makePrediction","useCallback","_MakePrediction","_callee2","canvasTensor","resizedCanvasTensor","displayComparisonTensor","displayResults","_context2","reduce","indexOfMaxValue","currentValue","currentIndex","arr","startScope","tensorUtils","then","res","endScope","NumberRecognitionApp"],"sourceRoot":""}